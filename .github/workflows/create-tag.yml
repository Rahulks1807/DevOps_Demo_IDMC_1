name: Auto Create Tag on PR Merge to develop

on:
  pull_request:
    types:
      - closed
    branches:
      - develop

permissions:
  contents: write
  pull-requests: write  # Required to comment on PRs

jobs:
  auto-tag:
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout develop (full history)
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Find latest SemVer tag reachable from develop
        id: base
        shell: bash
        run: |
          set -euo pipefail
          if BASE=$(git describe --tags --match '[0-9]*.[0-9]*.[0-9]*' --abbrev=0 2>/dev/null); then
            echo "base=$BASE" >> "$GITHUB_OUTPUT"
          else
            echo "base=0.0.0" >> "$GITHUB_OUTPUT"
          fi

      - name: Analyze PR title to determine bump type
        id: bump
        shell: bash
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          set -euo pipefail
          
          echo "📋 PR Title: $PR_TITLE"
          
          # Check for BREAKING CHANGE indicators
          if echo "$PR_TITLE" | grep -Eiq '(^|[[:space:]])BREAKING(\ |-)CHANGE'; then
            CHOICE=major
          elif echo "$PR_TITLE" | grep -Eq '^[a-zA-Z]+(\(.*\))?!:'; then
            # Examples: feat!:, fix!:, chore(api)!:
            CHOICE=major
          elif echo "$PR_TITLE" | grep -Eiq '^feat(\(.*\))?:'; then
            # Examples: feat:, feat(auth):
            CHOICE=minor
          elif echo "$PR_TITLE" | grep -Eiq '^(fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.*\))?:'; then
            # Standard conventional commit types
            CHOICE=patch
          else
            # Default to patch if no conventional commit format detected
            echo "⚠️ PR title doesn't follow Conventional Commits format. Defaulting to patch."
            CHOICE=patch
          fi
          
          echo "choice=$CHOICE" >> "$GITHUB_OUTPUT"
          echo "🔧 Bump type determined: $CHOICE"

      - name: Compute next SemVer
        id: next
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ steps.base.outputs.base }}"
          BUMP="${{ steps.bump.outputs.choice }}"
          
          if [[ ! "$BASE" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Base '$BASE' is not SemVer (MAJOR.MINOR.PATCH)"; exit 1
          fi
          
          IFS='.' read -r MA MI PA <<< "$BASE"
          
          case "$BUMP" in
            major) MA=$((MA+1)); MI=0; PA=0 ;;
            minor) MI=$((MI+1)); PA=0 ;;
            patch) PA=$((PA+1)) ;;
            *) echo "Unknown bump '$BUMP'"; exit 1 ;;
          esac
          
          NEXT="${MA}.${MI}.${PA}"
          echo "next=$NEXT" >> "$GITHUB_OUTPUT"
          echo "📌 Next version: $NEXT (from $BASE)"

      - name: Configure git author
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create and push annotated tag
        shell: bash
        run: |
          TAG="${{ steps.next.outputs.next }}"
          
          if git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "⚠️ Tag already exists: $TAG"
            echo "This might happen if multiple PRs are merged rapidly."
            exit 0  # Exit gracefully instead of failing
          fi
          
          git tag -a "$TAG" -m "Release $TAG

          Triggered by PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}
          Merged by: @${{ github.event.pull_request.merged_by.login }}"
          
          git push origin "$TAG"
          echo "✅ Created and pushed tag: $TAG"

      - name: Comment on PR with tag info
        continue-on-error: true  # Don't fail workflow if commenting fails
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ steps.next.outputs.next }}';
            const bumpType = '${{ steps.bump.outputs.choice }}';
            const baseTag = '${{ steps.base.outputs.base }}';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `🏷️ **Tag Created:** \`${tag}\`
              
              - **Previous version:** \`${baseTag}\`
              - **Bump type:** \`${bumpType}\`
              - **PR title:** ${context.payload.pull_request.title}
              
              You can now promote this release using the [Promote Release workflow](../../actions/workflows/promote-release.yml).`
            });

      - name: Summary
        run: |
          echo "# 🎉 Tag Creation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag created:** \`${{ steps.next.outputs.next }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous tag:** \`${{ steps.base.outputs.base }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump type:** \`${{ steps.bump.outputs.choice }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **PR:** #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Merged by:** @${{ github.event.pull_request.merged_by.login }}" >> $GITHUB_STEP_SUMMARY